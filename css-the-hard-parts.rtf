{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Introduction\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Testing out with a github markdown cheat sheet I have\u8230?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Code Example using Github Markdown\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 .foo \{\line
    color: red;\line
\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 function foo(str) \{\line
    return str + '...omg this is awesome!';\line
\}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Typography\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Headings\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Headings from {\f1 h1} through {\f1 h6} are constructed with a {\f1 #} for each level:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # h1 Heading\line
## h2 Heading\line
### h3 Heading\line
#### h4 Heading\line
##### h5 Heading\line
###### h6 Heading\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Renders to:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 h1 Heading\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 h2 Heading\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 h3 Heading\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 h4 Heading\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs20 h5 Heading\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs16 h6 Heading\par}
{\pard \ql \f0 \sa180 \li0 \fi0 HTML:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <h1>h1 Heading</h1>\line
<h2>h2 Heading</h2>\line
<h3>h3 Heading</h3>\line
<h4>h4 Heading</h4>\line
<h5>h5 Heading</h5>\line
<h6>h6 Heading</h6>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Horizontal Rules\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The HTML {\f1 <hr>} element is for creating a \u8220"thematic break\u8221" between paragraph-level elements. In markdown, you can create a {\f1 <hr>} with any of the following:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\f1 ___}: three consecutive underscores\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\f1 ---}: three consecutive dashes\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\f1 ***}: three consecutive asterisks\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 renders to:\par}
{\pard \qc \f0 \sa180 \li0 \fi0 \emdash\emdash\emdash\emdash\emdash\par}
{\pard \qc \f0 \sa180 \li0 \fi0 \emdash\emdash\emdash\emdash\emdash\par}
{\pard \qc \f0 \sa180 \li0 \fi0 \emdash\emdash\emdash\emdash\emdash\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Body Copy\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Body copy written as normal, plain text will be wrapped with {\f1 <p></p>} tags in the rendered HTML.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 So this body copy:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 renders to this HTML:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <p>Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.</p>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Emphasis\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Bold\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For emphasizing a snippet of text with a heavier font-weight.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The following snippet of text is {\b rendered as bold text}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 **rendered as bold text**\par}
{\pard \ql \f0 \sa180 \li0 \fi0 renders to:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b rendered as bold text}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 and this HTML\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <strong>rendered as bold text</strong>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Italics\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For emphasizing a snippet of text with italics.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The following snippet of text is {\i rendered as italicized text}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 _rendered as italicized text_\par}
{\pard \ql \f0 \sa180 \li0 \fi0 renders to:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\i rendered as italicized text}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 and this HTML:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <em>rendered as italicized text</em>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 strikethrough\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In GFM you can do strickthroughs.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ~~Strike through this text.~~\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Which renders to:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\strike Strike through this text.}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Blockquotes\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For quoting blocks of content from another source within your document.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Add {\f1 >} before any text you want to quote.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 Add `>` before any text you want to quote.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Renders to:\par}
{\pard \ql \f0 \sa180 \li720 \fi0 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 and this HTML:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <blockquote>\line
  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.</p>\line
</blockquote>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Blockquotes can also be nested:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 > Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue.\line
Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi.\line
>> Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor\line
odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam.\line
>>> Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue.\line
Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Renders to:\par}
{\pard \ql \f0 \sa180 \li720 \fi0 Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. > Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. >> Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Lists\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Unordered\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A list of items in which the order of the items does not explicitly matter.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 You may use any of the following symbols to denote bullets for each list item:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 * valid bullet\line
- valid bullet\line
+ valid bullet\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For example\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 + Lorem ipsum dolor sit amet\line
+ Consectetur adipiscing elit\line
+ Integer molestie lorem at massa\line
+ Facilisis in pretium nisl aliquet\line
+ Nulla volutpat aliquam velit\line
  - Phasellus iaculis neque\line
  - Purus sodales ultricies\line
  - Vestibulum laoreet porttitor sem\line
  - Ac tristique libero volutpat at\line
+ Faucibus porta lacus fringilla vel\line
+ Aenean sit amet erat nunc\line
+ Eget porttitor lorem\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Renders to:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Lorem ipsum dolor sit amet\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Consectetur adipiscing elit\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Integer molestie lorem at massa\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Facilisis in pretium nisl aliquet\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Nulla volutpat aliquam velit\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Phasellus iaculis neque\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Purus sodales ultricies\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Vestibulum laoreet porttitor sem\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Ac tristique libero volutpat at\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Faucibus porta lacus fringilla vel\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Aenean sit amet erat nunc\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Eget porttitor lorem\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 And this HTML\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <ul>\line
  <li>Lorem ipsum dolor sit amet</li>\line
  <li>Consectetur adipiscing elit</li>\line
  <li>Integer molestie lorem at massa</li>\line
  <li>Facilisis in pretium nisl aliquet</li>\line
  <li>Nulla volutpat aliquam velit\line
    <ul>\line
      <li>Phasellus iaculis neque</li>\line
      <li>Purus sodales ultricies</li>\line
      <li>Vestibulum laoreet porttitor sem</li>\line
      <li>Ac tristique libero volutpat at</li>\line
    </ul>\line
  </li>\line
  <li>Faucibus porta lacus fringilla vel</li>\line
  <li>Aenean sit amet erat nunc</li>\line
  <li>Eget porttitor lorem</li>\line
</ul>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Ordered\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A list of items in which the order of items does explicitly matter.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 1. Lorem ipsum dolor sit amet\line
2. Consectetur adipiscing elit\line
3. Integer molestie lorem at massa\line
4. Facilisis in pretium nisl aliquet\line
5. Nulla volutpat aliquam velit\line
6. Faucibus porta lacus fringilla vel\line
7. Aenean sit amet erat nunc\line
8. Eget porttitor lorem\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Renders to:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab Lorem ipsum dolor sit amet\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab Consectetur adipiscing elit\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 3.\tx360\tab Integer molestie lorem at massa\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 4.\tx360\tab Facilisis in pretium nisl aliquet\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 5.\tx360\tab Nulla volutpat aliquam velit\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 6.\tx360\tab Faucibus porta lacus fringilla vel\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 7.\tx360\tab Aenean sit amet erat nunc\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 8.\tx360\tab Eget porttitor lorem\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 And this HTML:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <ol>\line
  <li>Lorem ipsum dolor sit amet</li>\line
  <li>Consectetur adipiscing elit</li>\line
  <li>Integer molestie lorem at massa</li>\line
  <li>Facilisis in pretium nisl aliquet</li>\line
  <li>Nulla volutpat aliquam velit</li>\line
  <li>Faucibus porta lacus fringilla vel</li>\line
  <li>Aenean sit amet erat nunc</li>\line
  <li>Eget porttitor lorem</li>\line
</ol>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b TIP}: If you just use {\f1 1.} for each number, GitHub will automatically number each item. For example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 1. Lorem ipsum dolor sit amet\line
1. Consectetur adipiscing elit\line
1. Integer molestie lorem at massa\line
1. Facilisis in pretium nisl aliquet\line
1. Nulla volutpat aliquam velit\line
1. Faucibus porta lacus fringilla vel\line
1. Aenean sit amet erat nunc\line
1. Eget porttitor lorem\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Renders to:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab Lorem ipsum dolor sit amet\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab Consectetur adipiscing elit\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 3.\tx360\tab Integer molestie lorem at massa\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 4.\tx360\tab Facilisis in pretium nisl aliquet\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 5.\tx360\tab Nulla volutpat aliquam velit\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 6.\tx360\tab Faucibus porta lacus fringilla vel\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 7.\tx360\tab Aenean sit amet erat nunc\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 8.\tx360\tab Eget porttitor lorem\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Code\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Inline code\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Wrap inline snippets of code with {\f1 `}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For example, {\f1 <section></section>} should be wrapped as \u8220"inline\u8221".\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 For example, `<section></section>` should be wrapped as "inline".\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Indented code\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Or indent several lines of code by at least four spaces, as in:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     // Some comments\line
    line 1 of code\line
    line 2 of code\line
    line 3 of code\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 // Some comments\line
line 1 of code\line
line 2 of code\line
line 3 of code\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Block code \u8220"fences\u8221"\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Use \u8220"fences\u8221" {\f1 ```} to block in multiple lines of code.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 Sample text here...\par}
{\pard \ql \f0 \sa180 \li0 \fi0 HTML:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <pre>\line
  <p>Sample text here...</p>\line
</pre>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Syntax highlighting\par}
{\pard \ql \f0 \sa180 \li0 \fi0 GFM, or \u8220"GitHub Flavored Markdown\u8221" also supports syntax highlighting. To activate it, simply add the file extension of the language you want to use directly after the first code \u8220"fence\u8221", {\f1 ``` js}, and syntax highlighting will automatically be applied in the rendered HTML. For example, to apply syntax highlighting to JavaScript code:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Renders to:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 grunt.initConfig(\{\line
  assemble: \{\line
    options: \{\line
      assets: 'docs/assets',\line
      data: 'src/data/*.\{json,yml\}',\line
      helpers: 'src/custom-helpers.js',\line
      partials: ['src/partials/**/*.\{hbs,md\}']\line
    \},\line
    pages: \{\line
      options: \{\line
        layout: 'default.hbs'\line
      \},\line
      files: \{\line
        './': ['src/templates/pages/index.hbs']\line
      \}\line
    \}\line
  \}\line
\};\par}
{\pard \ql \f0 \sa180 \li0 \fi0 And this complicated HTML:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <div class="highlight"><pre><span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">(\{</span>\line
  <span class="nx">assemble</span><span class="o">:</span> <span class="p">\{</span>\line
    <span class="nx">options</span><span class="o">:</span> <span class="p">\{</span>\line
      <span class="nx">assets</span><span class="o">:</span> <span class="s1">'docs/assets'</span><span class="p">,</span>\line
      <span class="nx">data</span><span class="o">:</span> <span class="s1">'src/data/*.\{json,yml\}'</span><span class="p">,</span>\line
      <span class="nx">helpers</span><span class="o">:</span> <span class="s1">'src/custom-helpers.js'</span><span class="p">,</span>\line
      <span class="nx">partials</span><span class="o">:</span> <span class="p">[</span><span class="s1">'src/partials/**/*.\{hbs,md\}'</span><span class="p">]</span>\line
    <span class="p">\},</span>\line
    <span class="nx">pages</span><span class="o">:</span> <span class="p">\{</span>\line
      <span class="nx">options</span><span class="o">:</span> <span class="p">\{</span>\line
        <span class="nx">layout</span><span class="o">:</span> <span class="s1">'default.hbs'</span>\line
      <span class="p">\},</span>\line
      <span class="nx">files</span><span class="o">:</span> <span class="p">\{</span>\line
        <span class="s1">'./'</span><span class="o">:</span> <span class="p">[</span><span class="s1">'src/templates/pages/index.hbs'</span><span class="p">]</span>\line
      <span class="p">\}</span>\line
    <span class="p">\}</span>\line
  <span class="p">\}</span>\line
<span class="p">\};</span>\line
</pre></div>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Tables\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Tables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 | Option | Description |\line
| ------ | ----------- |\line
| data   | path to data files to supply the data that will be passed into templates. |\line
| engine | engine to be used for processing templates. Handlebars is the default. |\line
| ext    | extension to be used for dest files. |\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Renders to:\par}
{
\trowd \trgaph120
\clbrdrb\brdrs\cellx4320\clbrdrb\brdrs\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 Option\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 Description\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 data\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 path to data files to supply the data that will be passed into templates.\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 engine\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 engine to be used for processing templates. Handlebars is the default.\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 ext\par}
\cell}
{{\pard\intbl \ql \f0 \sa0 \li0 \fi0 extension to be used for dest files.\par}
\cell}
}
\intbl\row}
{\pard \ql \f0 \sa180 \li0 \fi0 \par}
{\pard \ql \f0 \sa180 \li0 \fi0 And this HTML:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <table>\line
  <tr>\line
    <th>Option</th>\line
    <th>Description</th>\line
  </tr>\line
  <tr>\line
    <td>data</td>\line
    <td>path to data files to supply the data that will be passed into templates.</td>\line
  </tr>\line
  <tr>\line
    <td>engine</td>\line
    <td>engine to be used for processing templates. Handlebars is the default.</td>\line
  </tr>\line
  <tr>\line
    <td>ext</td>\line
    <td>extension to be used for dest files.</td>\line
  </tr>\line
</table>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Right aligned text\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Adding a colon on the right side of the dashes below any heading will right align text for that column.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 | Option | Description |\line
| ------:| -----------:|\line
| data   | path to data files to supply the data that will be passed into templates. |\line
| engine | engine to be used for processing templates. Handlebars is the default. |\line
| ext    | extension to be used for dest files. |\par}
{
\trowd \trgaph120
\clbrdrb\brdrs\cellx4320\clbrdrb\brdrs\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 Option\par}
\cell}
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 Description\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 data\par}
\cell}
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 path to data files to supply the data that will be passed into templates.\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 engine\par}
\cell}
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 engine to be used for processing templates. Handlebars is the default.\par}
\cell}
}
\intbl\row}
{
\trowd \trgaph120
\cellx4320\cellx8640
\trkeep\intbl
{
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 ext\par}
\cell}
{{\pard\intbl \qr \f0 \sa0 \li0 \fi0 extension to be used for dest files.\par}
\cell}
}
\intbl\row}
{\pard \ql \f0 \sa180 \li0 \fi0 \par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Links\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Basic link\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [Assemble](http://assemble.io)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Renders to (hover over the link, there is no tooltip):\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\field{\*\fldinst{HYPERLINK "http://assemble.io"}}{\fldrslt{\ul
Assemble
}}}
\par}
{\pard \ql \f0 \sa180 \li0 \fi0 HTML:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <a href="http://assemble.io">Assemble</a>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Add a title\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 [Upstage](https://github.com/upstage/ "Visit Upstage!")\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Renders to (hover over the link, there should be a tooltip):\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\field{\*\fldinst{HYPERLINK "https://github.com/upstage/"}}{\fldrslt{\ul
Upstage
}}}
\par}
{\pard \ql \f0 \sa180 \li0 \fi0 HTML:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <a href="https://github.com/upstage/" title="Visit Upstage!">Upstage</a>\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Named Anchors\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Named anchors enable you to jump to the specified anchor point on the same page. For example, each of these chapters:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 # Table of Contents\line
  * [Chapter 1](#chapter-1)\line
  * [Chapter 2](#chapter-2)\line
  * [Chapter 3](#chapter-3)\par}
{\pard \ql \f0 \sa180 \li0 \fi0 will jump to these sections:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## Chapter 1 <a id="chapter-1"></a>\line
Content for chapter one.\line
\line
## Chapter 2 <a id="chapter-2"></a>\line
Content for chapter one.\line
\line
## Chapter 3 <a id="chapter-3"></a>\line
Content for chapter one.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b NOTE} that specific placement of the anchor tag seems to be arbitrary. They are placed inline here since it seems to be unobtrusive, and it works.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Cascade Rules\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This chapter will discuss how the browser determines which style rule to apply to an element. It seems that are many resources that talk about individual components of this determination such as specificity, cascade, etc., in isolation. I feel this is a huge mistake and leaves developers confused as to how things actually work. In fact, the spec\u8217's chapter that speaks to the way this is worked out is {\field{\*\fldinst{HYPERLINK "http://www.w3.org/TR/CSS2/cascade.html"}}{\fldrslt{\ul
fairly short
}}}
 and worth a glance. Let\u8217's take a look at the way a browser determines which rule \u8220"wins\u8221"\u8230?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 We\u8217'll take the approach of annotating parts of this spec so we\u8217're confident in how this all works. Let\u8217's start with __specified values_:\par}
{\pard \ql \f0 \sa180 \li720 \fi0 6.1.1 Specified values\par}
{\pard \ql \f0 \sa180 \li720 \fi0 User agents must first assign a specified value to each property based on the following mechanisms (in order of precedence):\par}
{\pard \ql \f0 \sa180 \li720 \fi0 If the cascade results in a value, use it. Otherwise, if the property is inherited and the element is not the root of the document tree, use the computed value of the parent element. Otherwise use the property\u8217's initial value. The initial value of each property is indicated in the property\u8217's definition.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 So this leads us to ask, \u8220"What exactly are these things: {\i cascade}, {\i inheritance}, and what\u8217's a property\u8217's {\i initial value}?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 The cascade\par}
{\pard \ql \f0 \sa180 \li720 \fi0 Style sheets may have three different origins: author, user, and user agent.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 We\u8217'll go deeper, but for now, just think of the {\i cascade} as the ordering of the various types of stylesheets that need to be evaluated. As rule 6.1.1 above states, the cascade gets the most weight in the decision of which rule to apply to an element.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Inheritance\par}
{\pard \ql \f0 \sa180 \li720 \fi0 When inheritance occurs, elements inherit computed values. The computed value from the parent element becomes both the specified value and the computed value on the child.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note that some types of CSS properties are inherited, others are not. {\field{\*\fldinst{HYPERLINK "http://www.w3.org/TR/CSS2/propidx.html"}}{\fldrslt{\ul
See a table
}}}
, but, for example, {\f1 color} is inherited while {\f1 display} or {\f1 border} are not. As you notice from 6.1.1, this factor takes second place in terms of precedence. Also, the specificity of an inherited rule is \u8220"nada\u8221". We\u8217'll look at how that gets taken in to account in a bit.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Initial Value\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\field{\*\fldinst{HYPERLINK "http://reference.sitepoint.com/css/defaultvalues"}}{\fldrslt{\ul
Sitepoint
}}}
 provides a great overview of how initial values work:\par}
{\pard \ql \f0 \sa180 \li720 \fi0 The default value for a property, when it\u8217's not specified explicitly or inherited, is called the initial value. The initial value of each property is defined in the CSS specification.\par}
{\pard \ql \f0 \sa180 \li720 \fi0 Browsers have user agent style sheets that define the default rendering of the various HTML element types. In some cases, the rules in those built-in style sheets define values other than the initial values from the CSS specification. For example, links are usually underlined, even though the initial value for the text-decoration property is none.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Further, as we saw in 6.1.1, initial value comes after the cascade and inheritance in terms of precedence.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 CSS Rule Sorting\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Before we dive in to the details of things {\i specificity}, {\i inheritance}, etc., let\u8217's attempt to get a broader overview of just how the browser determines which rule to apply for a given element. It\u8217's, essentially, a four-step process:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab {\b Gather Qualified Declarations:} First gather all declarations that apply to the element for the current medium (such as {\i screen}, {\i print}, etc.) Pass all matches through to the next part of the sorting algorthm\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab {\b Sort by Origin:} In this level of sorting, sort by stylesheet origin in ascending order of precedence which {\field{\*\fldinst{HYPERLINK "http://www.w3.org/TR/CSS2/cascade.html#cascading-order"}}{\fldrslt{\ul
the spec
}}}
 as:\sa180\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab user agent declarations\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab user normal declarations\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab author normal declarations\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab author important declarations\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab user important declarations (intuitevly we can see that, in order to provide accessibility, user\u8217's with special requirements are given a final and most prioritized mechanism)\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\i The term {\b weight} is sometimes used to describe the priority provided given the above considerations}\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 3.\tx360\tab {\b Sort by Specificity:} If, and only if, the above sort results in rules having duplicate importance and origin, than, sort by the specificity of selector\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 4.\tx360\tab {\b Sort by Order of Declaration:} If, and only if, the competing declarations have the same weight and specificity, than sort by order specified (where the latter specified wins).\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 One reason why we describe these broader rules here, is that it\u8217's important to understand that {\b weight}, or, {\i sort by origin}, will always \u8220"beat out\u8221" {\b specificity}. Put differently, it doesn\u8217't matter how much more specific one rule is over another if they aren\u8217't deemed to have the same origin/weight. Not understanding this fact can lead to confusing results. That said, most of the time we are, in fact, \u8220"competing with ourselves\u8221" as author stylesheets are generally carry the most weight ({\f1 !important} rules notwithstanding).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you\u8217'd like a visual presentation of how the cascade rules are applied you may want to check out Russ Weakley\u8217's excellent {\field{\*\fldinst{HYPERLINK "http://www.slideshare.net/maxdesign/css-cascade-1658158"}}{\fldrslt{\ul
CSS Cascade Slideshare
}}}
 chock full of extremely useful examples.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Origin\par}
{\pard \ql \f0 \sa180 \li0 \fi0 TBD\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Specificity Details\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 References\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\field{\*\fldinst{HYPERLINK "http://shop.oreilly.com/product/9780596802455.do"}}{\fldrslt{\ul
CSS: The Missing Manual:
}}}
 {\field{\*\fldinst{HYPERLINK "http://shop.oreilly.com/product/9780596527334.do"}}{\fldrslt{\ul
CSS: The Definitive Guide, 3rd Edition:
}}}
 {\field{\*\fldinst{HYPERLINK "http://www.w3.org/TR/CSS2/cascade.html"}}{\fldrslt{\ul
CSS 2.1 Spec:
}}}
\par}
{\pard \ql \f0 \sa180 \li0 \fi0 http://css-tricks.com/specifics-on-css-specificity/ http://www.smashingmagazine.com/2007/07/27/css-specificity-things-you-should-know/\par}
}
